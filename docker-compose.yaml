services:
  ticket-service:
    build: ./
    ports:
      - 8080:8080
    volumes:
      - "./client.docker.properties:/client.docker.properties"
    command: ["lab.tall15421542.app.ticket.Service", "-c", "client.docker.properties", "-p", "8080", "-n", "500"]
    depends_on:
      init-kafka:
        condition: service_completed_successfully

  reservation-service:
    build: ./
    volumes:
      - "./client.docker.properties:/client.docker.properties"
    command: ["lab.tall15421542.app.reservation.Service", "-c", "client.docker.properties"]
    depends_on:
      init-kafka:
        condition: service_completed_successfully

  event-service:
    build: ./
    volumes:
      - "./client.docker.properties:/client.docker.properties"
    command: ["lab.tall15421542.app.event.Service", "-c", "client.docker.properties"]
    depends_on:
      init-kafka:
        condition: service_completed_successfully


  kafka-1:
    image: apache/kafka:3.9.0
    hostname: kafka-1
    container_name: kafka-1
    ports:
      - 29092:9092
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093'
      KAFKA_LISTENERS: 'PLAINTEXT://:19092,CONTROLLER://:9093,PLAINTEXT_HOST://:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:19092,PLAINTEXT_HOST://localhost:29092
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'

  kafka-2:
    image: apache/kafka:3.9.0
    hostname: kafka-2
    container_name: kafka-2
    ports:
      - 39092:9092
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093'
      KAFKA_LISTENERS: 'PLAINTEXT://:19092,CONTROLLER://:9093,PLAINTEXT_HOST://:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:19092,PLAINTEXT_HOST://localhost:39092
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'

  kafka-3:
    image: apache/kafka:3.9.0
    hostname: kafka-3
    container_name: kafka-3
    ports:
      - 49092:9092
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093'
      KAFKA_LISTENERS: 'PLAINTEXT://:19092,CONTROLLER://:9093,PLAINTEXT_HOST://:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-3:19092,PLAINTEXT_HOST://localhost:49092
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'

  init-kafka:
    image: apache/kafka:3.9.0
    working_dir: /opt/kafka/bin/
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      ./kafka-topics.sh --bootstrap-server kafka-1:19092 --list
      
      echo -e 'Creating kafka topics'
      ./kafka-topics.sh --create --topic command.event.create_event --bootstrap-server kafka-1:19092 --partitions 20 --replication-factor 2 --if-not-exists
      ./kafka-topics.sh --create --topic response.reservation.result --bootstrap-server kafka-1:19092 --partitions 20 --replication-factor 2 --if-not-exists
      ./kafka-topics.sh --create --topic state.event.area_status --bootstrap-server kafka-1:19092 --partitions 20 --replication-factor 2 --if-not-exists
      ./kafka-topics.sh --create --topic command.event.reserve_seat --bootstrap-server kafka-1:19092 --partitions 20 --replication-factor 2 --if-not-exists
      ./kafka-topics.sh --create --topic command.reservation.create_reservation --bootstrap-server kafka-1:19092 --partitions 20 --replication-factor 2 --if-not-exists
      ./kafka-topics.sh --create --topic state.user.reservation --bootstrap-server kafka-1:19092 --partitions 20 --replication-factor 2 --if-not-exists
      
      echo -e 'Successfully created the following topics:'
      ./kafka-topics.sh --bootstrap-server kafka-1:19092 --list
      "

  # Schema Registry
  schema-registry:
    image: confluentinc/cp-schema-registry:7.8.1
    container_name: schema-registry
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka-1:19092,PLAINTEXT://kafka-2:19092,PLAINTEXT://kafka-3:19092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    ports:
      - "8081:8081"

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    ports:
      - 9000:9000
    environment:
      KAFKA_BROKERCONNECT: kafka-1:19092,kafka-2:19092,kafka-3:19092
      KAFKA_PROPERTIES: |
        bootstrap.servers=kafka-1:19092,kafka-2:19092,kafka-3:19092
        schema.registry.url=http://schema-registry:8081
      SCHEMAREGISTRY_CONNECT: http://schema-registry:8081
      CMD_ARGS: "--message.format=AVRO --message.keyFormat=DEFAULT"
      SERVER_PORT: 9000

  jaeger:
      image: jaegertracing/jaeger:2.3.0
      volumes:
        - "./otel/jaeger/config.yaml:/etc/jaeger/config.yml"
      command: ["--config", "/etc/jaeger/config.yml"]
      ports:
        - "16686:16686"
        - "14269:14269"
        - "8888:8888"
        - "8889:8889"
        - "4317:4317"
        - "4318:4318"
  prometheus:
    image: prom/prometheus:v3.2.0
    volumes:
      - "./otel/prometheus/config.yml:/etc/prometheus/prometheus.yml"
    ports:
      - "9090:9090"
    links: 
      - "jaeger:spm_metrics_source" # This is the host name used in Prometheus scrape configuration.
